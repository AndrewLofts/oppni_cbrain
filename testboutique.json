{
    "name": "testboutique",
    "tool-version": "1.0.0",
    "schema-version": "0.5",
    "description": "Boutique JSON Descriptor for the TEST tool.",
    "command-line": "bash testbuilder.sh [OPPNI_LOCATION] [INPUT_FILE] [PIPELINE_FILE] [ANALYSIS_TYPE] [REFERENCE_FILE] [TPATTERN] [PART] [CONVOLVE] [METRIC] [CONTRAST] [VASC_MASK] [NUM_PCS] [KEEPMEAN] [VOXEL_SIZE] [BLURTOFWHM] [DEOBLIQUE] [CONTROL_MOTION_ARTIFACT] [CONTROL_WM_BIAS] [OUPUT_NII_ALSO]",
    "inputs":[{
            "value-key": "[OPPNI_LOCATION]", 
            "type": "File", 
            "optional": false, 
            "id": "oppni_location", 
            "name": "OPPNI file",
            "description":"Path to the oppni.py version you are using"
         },
         {
            "command-line-flag": "-i",
            "value-key": "[INPUT_FILE]", 
            "type": "File", 
            "optional": false, 
            "id": "in_file", 
            "name": "Input file",
            "description":"Path and name of the {subject input}.txt file. (oppni -i option)"
         },
         {
            "command-line-flag": "-c",
            "value-key": "[PIPELINE_FILE]", 
            "type": "File", 
            "optional": false, 
            "id": "pipeline_file", 
            "name": "Pipeline file",
            "description":"Path and name of PIPELINE.txt, with list of pipeline steps being tested. (oppni -c option)"
         },
         {
            "command-line-flag": "-a",
            "value-key": "[ANALYSIS_TYPE]", 
            "type": "String", 
            "optional": false, 
            "id": "analysis_type", 
            "name": "Anaylsis Type",
            "description":"Chosen analysis model (LDA, GNB, GLM, erCVA, erGNB, erGLM, SCONN, NONE). (oppni -a option)"
         },        
         {
            "command-line-flag": "-r",
            "value-key": "[REFERENCE_FILE]", 
            "type": "File", 
            "optional": false, 
            "id": "reference_file", 
            "name": "Reference File",
            "description":"Path and name of reference volume used in (optional) spatial normalization step. This volume must be in the same orientation as the input images and ideally be skull-stripped. (oppni -r option)"
         }, 
         {
            "command-line-flag": "--TPATTERN",
            "value-key": "[TPATTERN]", 
            "type": "String", 
            "optional": true, 
            "value-choices":[
		"alt+z",
		"alt+z2",
		"alt-z",
		"alt-z2",
		"seq+z",
		"seq-z",
		"auto_hdr",
		""
	     ],
            "default-value": "",
            "id": "tpattern", 
            "name": "T Pattern ",
            "description":"Defines axial slices acquisition order for slice-timing correction - this must be specified whenever slice timing correction is requested. (oppni --TPATERN option)"
         }, 
         {
            "command-line-flag": "-p",
            "value-key": "[PART]", 
            "type": "Number", 
            "optional": true, 
            "maximum": 4,
            "minimum": 0,
            "default-value": 0,
            "id": "part", 
            "name": "Start at Point ",
            "description":"Only do specific parts of full optimization pipeline. 0= do all three steps (this is the default, and recommended). 1= run all pipelines and produce metrics. 2= select optimal pipelines based on metrics (must have already run part-1). 3= do spatial normalization of optimized results (must have already run parts-1,2). 4=run QC only (choose this only when you have existing processing that was successfully completed from earlier runs, and also supply the flag --use_prev_processing_for_QC). (oppni -p option)"
         },         
         {
            "command-line-flag": "-convolve",
            "value-key": "[CONVOLVE]", 
            "type": "Number", 
            "optional": true, 
            "maximum": 1,
            "minimum": 0,
            "default-value": 0,
            "id": "convolve", 
            "name": "Convolve Value",
            "description":"Binary value, determines whether user-provided design matrix (in split_info) should be convolved with the canonical HRF modeled by two gamma functions (AFNI’s “SPM1” function), for TASK pipeline step and GLM analysis.  0 = do not convolve and 1 = perform convolution (default =0)(oppni -convolve option)"
         },          
         {
            "command-line-flag": "-m",
            "value-key": "[METRIC]", 
            "type": "String", 
            "optional": true, 
            "value-choices":[
		"P",
		"R",
		"dPR",
		""
	     ],
            "default-value": "dPR",
            "id": "metric", 
            "name": "Metric",
            "description":"Metric used to choose optimal pipelines standard options include ‘R’= reproducibility, ‘P’= prediction, ‘dPR= combined prediction & reproducibility (this is the default). (oppni -m option)"
         },
         {
            "command-line-flag": "--contrast",
            "value-key": "[CONTRAST]", 
            "type": "String", 
            "optional": true, 
            "value-choices":[
		"1-2",
		"2-3",
                "nocontrast",
		""
	     ],
            "default-value": "1-2",
            "id": "contrast", 
            "name": "Contrast Combination",
            "description":"Task contrast being analyzed and optimized for. Necessary when more than two conditions are defined in the split_info files. Syntax: --contrast 'CON1-CON2,CON2-CON3', where CON1, CON2 are condition names (The condition number may be used instead, e.g. –contrast 1-2,2-3 ). Default is --contrast 1-2. (See Subsection 4.ii for more details)  If you are doing a single condition ‘nocontrast’, this is omitted. NOTE: event-related analysis is *always* relative to baseline, e.g. --contrast “CON1-baseline”, as it is modelling HRF shape relative to baseline BOLD signal. (oppni --contrast option)"
         },
         {
            "command-line-flag": "--vasc_mask",
            "value-key": "[VASC_MASK]", 
            "type": "Number", 
            "optional": true, 
            "maximum": 1,
            "minimum": 0,
            "default-value": 1,
            "id": "vasc_mask", 
            "name": "Vascular Mask",
            "description":"Toggles estimation of subject-specific vascular mask that would be excluded prior to analysis (0: disble, 1: enable). Default enabled. (oppni --vasc_mask option)"
          },
          {
            "command-line-flag": "--num_PCs",
            "value-key": "[NUM_PCS]", 
            "type": "Number", 
            "optional": true, 
            "id": "num_pcs", 
            "name": "Number of PCs to Retain",
            "description":"NUMBER = total number of principal components to retain. (oppni --num_PCs option)"
          },
	  {
            "command-line-flag": "-k",
            "value-key": "[KEEPMEAN]", 
            "type": "Number", 
            "optional": true, 
            "maximum": 1,
            "minimum": 0,
            "default-value": 0,
            "id": "keepmean", 
            "name": "Keep Mean",
            "description":"KEEPMEAN=binary value that determines whether the output nifti files have temporal means re-added to each voxel after processing (default KEEPMEAN=1, not remove the mean scan), or the mean is removed and not replaced (KEEPMEAN=0). (oppni -k option)"
          },         
          {
            "command-line-flag": "--voxelsize",
            "value-key": "[VOXEL_SIZE]", 
            "type": "String", 
            "optional": true, 
            "id": "voxel_size", 
            "name": "Voxel Size",
            "description":"Determines the output voxel size of nifti file. Syntax: -v “[3.0 3.0 5.0]” gives 3x3x5 mm voxels as final results. Default is to keep output voxels the same size as input.  (oppni --voxelsize option)"
         }, 	 
         {
            "command-line-flag": "-BlurToFWHM",
            "value-key": "[BLURTOFWHM]", 
            "type": "Number", 
            "optional": true, 
            "maximum": 1,
            "minimum": 0,
            "default-value": 0,
            "id": "blurtofwhm", 
            "name": "Blur to FWHM",
            "description":"This option will enable adaptive spatial smoothing to equalize smoothing across multiple sites. Default 0. (oppni --BlurToFWHM option)"
          },
          {
            "command-line-flag": "--DEOBLIQUE",
            "value-key": "[DEOBLIQUE]", 
            "type": "Flag", 
            "list": false, 
            "optional": true,
            "id": "deoblique", 
            "name": "Deoblique",
            "description":"Corrects for raw data that are at an oblique angle relative to the cardinal scanning axes, using AFNI’s 3dWarp program. May improve the quality of registration. (oppni --DEOBLIQUE option)"
          },
          {
            "command-line-flag": "--control_motion_artifact",
            "value-key": "[CONTROL_MOTION_ARTIFACT]", 
            "type": "String", 
            "optional": true, 
            "value-choices":[
		"yes",
		"no",
		""
	     ],
            "default-value": "yes",
            "id": "control_motion_artifact", 
            "name": "Control Motion Artifact",
            "description":"Control for motion artifact. Default yes.  (oppni --control_motion_artifact option)"
         }, 
         {
            "command-line-flag": "--control_wm_bias",
            "value-key": "[CONTROL_WM_BIAS]", 
            "type": "String", 
            "optional": true, 
            "value-choices":[
		"yes",
		"no",
		""
	     ],
            "default-value": "no",
            "id": "control_wm_bias", 
            "name": "Control WM Bias",
            "description":"Control for white matter bias using spatial priors. Default no. (oppni --control_wm_bias option)"
         },
         {
            "command-line-flag": "--output_nii_also",
            "value-key": "[OUPUT_NII_ALSO]", 
            "type": "Number", 
            "optional": true, 
            "maximum": 1,
            "minimum": 0,
            "default-value": 0,
            "id": "output_nii_also", 
            "name": "Output the nii also",
            "description":"Whether to output spms for all the optimal pipelines. (oppni --output_nii_also option)"
          } ],
    "output-files":[{
            "value-key": "[MASK]",
            "description": "Log of the oppni status check of the project", 
            "path-template": "[MASK]_status_check.log", 
            "optional": false, 
            "id": "statuslogoutput", 
            "name": "Statis Log Output"
         }],
    "error-codes":[{
            "code": 1,
            "description": "Crashed"
        }]
}
